import pino from 'pino';

const logger = pino({ name: 'Contextualizer' });

export interface CodeChunk {
	filePath: string;
	functionName?: string; // Optional, as not all code is in functions
	startLine: number;
	endLine: number;
	content: string;
	language: string;
}

export interface ContextualizedChunk {
	originalChunk: CodeChunk;
	naturalLanguageDescription: string;
	chunkSpecificContext: string; // Added
	/** Content prepared for embedding, potentially including context */
	embeddingContent: string;
	/** Structured data to store alongside the vector in the index */
	metadata: Record<string, any>;
}

/**
 * Enriches a code chunk with context for better embedding and retrieval.
 * Based on Anthropic's approach: prepend metadata and NL description.
 *
 * @param chunk The code chunk object.
 * @param nlDescription The natural language description generated by the translator.
 * @param chunkSpecificContext The chunk-specific context generated by the translator.
 * @returns A ContextualizedChunk object ready for embedding and indexing.
 */
export function contextualizeChunk(chunk: CodeChunk, nlDescription: string, chunkSpecificContext: string): ContextualizedChunk {
	logger.debug(`Contextualizing chunk for: ${chunk.filePath} ${chunk.functionName ? `(Function: ${chunk.functionName})` : ''}`);

	// Based on Anthropic's "Contextual Retrieval" where the contextualized_chunk is:
	// "This chunk is from an SEC filing... The company's revenue grew by 3%..."
	// This implies the chunkSpecificContext *is* the primary text, with original code appended.
	// Let's use:
	const embeddingContent = `Context: ${chunkSpecificContext}

Original Code Snippet:
\`\`\`${chunk.language}
${chunk.content}
\`\`\``;

	// Metadata to store in the Discovery Engine document (non-embedded fields)
	const metadata = {
		file_path: chunk.filePath,
		function_name: chunk.functionName,
		start_line: chunk.startLine,
		end_line: chunk.endLine,
		language: chunk.language,
		natural_language_description: nlDescription, // General description from existing translator
		chunk_specific_context: chunkSpecificContext, // Specific context for embedding strategy
		original_code: chunk.content, // Store original code for retrieval display
	};

	return {
		originalChunk: chunk,
		naturalLanguageDescription: nlDescription,
		chunkSpecificContext: chunkSpecificContext, // Added to the object
		embeddingContent: embeddingContent,
		metadata: metadata,
	};
}

// --- Placeholder for potential future LLM-based contextualization ---
// async function contextualizeWithLlm(chunk: CodeChunk, nlDescription: string): Promise<ContextualizedChunk> {
//     logger.debug(`Contextualizing chunk with LLM for: ${chunk.filePath}`);
//     // Construct prompt to ask LLM for broader context analysis
//     const prompt = `... provide context for this chunk ...`;
//     // Call LLM
//     const context = await llm.generateText(prompt);
//     const embeddingContent = `Context: ${context}\n${nlDescription}\n\nCode:\n${chunk.content}`;
//     // ... create metadata ...
//     return { /* ... */ };
// }
