#!/bin/bash
set -e

# Define the Docker image name for the test environment
IMAGE_NAME="typedai/test_configure:latest"
DOCKERFILE="bin/configure_parts/Dockerfile"

# Check if the Docker image exists. If not, build it.
if ! docker image inspect "$IMAGE_NAME" &> /dev/null; then
    echo "Test environment Docker image not found. Building '$IMAGE_NAME'..."
    # Ensure the Dockerfile exists
    if [ ! -f "$DOCKERFILE" ]; then
        echo "Error: Dockerfile not found at '$DOCKERFILE'"
        exit 1
    fi
    docker build -t "$IMAGE_NAME" -f "$DOCKERFILE" .
    echo "Docker image '$IMAGE_NAME' built successfully."
else
    echo "Using existing Docker image '$IMAGE_NAME'."
fi

# --- Pass through test environment variables ---
DOCKER_ENV_ARGS=""
# Get all environment variables starting with TYPEDAI_TEST_
# and format them for the 'docker run --env' flag.
# Using `printenv` and `grep` for portability.
for var in $(printenv | grep '^TYPEDAI_TEST_' | cut -d= -f1); do
  # Pass the variable to the docker container
  DOCKER_ENV_ARGS+="--env $var "
done

# DOCKER_CMD for testing of the configure script.
# This command now runs inside the pre-built Docker image.
read -r -d '' DOCKER_CMD << 'EOF' || true
set -ex

echo "configure_test: --- Preparing environment inside Docker ---"

# The /app directory is a mount of the host project. To avoid file permission
# issues on the host, we copy the project into a directory owned by the
# container's 'testuser' and run the script from there.
echo "configure_test: Copying project files into the container's workspace..."
rsync -a --exclude='.git/' --filter=':- .gitignore' /app/ /home/testuser/app/
chown -R testuser:testuser /home/testuser/app

# Change to the workspace directory
cd /home/testuser/app

echo "configure_test: --- Running configure script as 'testuser' ---"

# Execute the configure script as 'testuser' while preserving the
# TYPEDAI_TEST_* environment variables passed into the container.
# We must explicitly set HOME for the testuser so that tools like pyenv
# are installed in the correct directory (/home/testuser/.pyenv).
# If the script fails, drop into a shell for debugging.
sudo -E -u testuser HOME=/home/testuser ./bin/configure || {
    echo "❌ bin/configure exited with code $? – opening interactive bash shell for debugging…"
    exec bash
}

echo "configure_test: --- Configure script finished successfully ---"
EOF

# Determine if we should run in interactive mode.
# If stdin is a TTY, we're likely in an interactive shell.
DOCKER_RUN_FLAGS="--rm"
if [[ -t 0 ]]; then
    echo "Interactive terminal detected. Running with -it flags."
    DOCKER_RUN_FLAGS="-it --rm"
fi

# Run docker with the command.
# The flags will be '-it --rm' for interactive sessions (manual runs from a TTY)
# and just '--rm' for non-interactive sessions (e.g., from an automated test runner).
docker run $DOCKER_RUN_FLAGS \
  $DOCKER_ENV_ARGS \
  -v "$(pwd):/app" \
  -v "${HOME}/.config/gcloud:/home/testuser/.config/gcloud:ro" \
  --workdir /app \
  "$IMAGE_NAME" \
  bash -c "$DOCKER_CMD"
