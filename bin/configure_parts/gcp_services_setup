#!/bin/bash
# Google Cloud Platform - Generic Services Setup ---------------------------------
# This script is sourced by the main configure script.
# It sets the following variables for the parent script:
# - GCP_SETUP_SUCCESS (true or false)
# - CURRENT_GCLOUD_PROJECT (the project ID, if configured)

# Function to update or add a variable in an .env file (local to this script)
_update_gcp_env_var() {
    local file_path="./variables/local.env"
    local var_name="$1"
    local new_value="$2"
    local temp_file
    # Ensure the directory for the file_path exists
    mkdir -p "$(dirname "$file_path")"
    if [ ! -f "$file_path" ]; then touch "$file_path"; fi
    # Escape forward slashes and ampersands for sed, and handle newlines
    local escaped_new_value=$(echo "$new_value" | sed -e 's/[\/&]/\\&/g' -e 's/$/\\n/' -e '$s/\\n$//')
    # Escape characters that have special meaning in regex for the variable name
    local escaped_var_name=$(echo "$var_name" | sed -e 's/[]\/$*.^|[]/\\&/g')
    temp_file=$(mktemp)
    if grep -q "^${escaped_var_name}=" "$file_path"; then
        sed "s|^${escaped_var_name}=.*|$var_name=$escaped_new_value|" "$file_path" > "$temp_file" && mv "$temp_file" "$file_path"
    else
        echo "$var_name=$new_value" >> "$file_path"
    fi
    [ -f "$temp_file" ] && rm -f "$temp_file"
}

# Initialize variables for the parent script
GCP_SETUP_SUCCESS=false
# Source local.env carefully to get existing values
(set +e; set +u; source ./variables/local.env)
CURRENT_GCLOUD_PROJECT=${GCLOUD_PROJECT:-}

# --- Prompt user about using GCP ---
GCP_PROMPT_DEFAULT="n"
if [ -n "$CURRENT_GCLOUD_PROJECT" ]; then
    GCP_PROMPT_DEFAULT="y"
fi

gcp_choice=""
if [ -n "$TYPEDAI_TEST_USE_GCP" ]; then
    echo "Using TYPEDAI_TEST_USE_GCP: $TYPEDAI_TEST_USE_GCP"
    gcp_choice="$TYPEDAI_TEST_USE_GCP"
else
    read -r -p "Do you plan to use any Google Cloud services (e.g., Vertex AI, Gemini, Cloud Tracing)? (Y/n, default: $GCP_PROMPT_DEFAULT) " gcp_choice
fi
gcp_choice_lower=$(echo "$gcp_choice" | tr '[:upper:]' '[:lower:]')

# --- Act on user's choice ---
if ! [[ "$gcp_choice_lower" == "y" ]] && ! ([[ -z "$gcp_choice" ]] && [[ "$GCP_PROMPT_DEFAULT" == "y" ]]); then
    echo "Skipping Google Cloud services configuration."
    _update_gcp_env_var "TRACE_AGENT_ENABLED" "false"
    GCP_SETUP_SUCCESS=false
    # Re-source to ensure CURRENT_GCLOUD_PROJECT is up-to-date for the parent script
    (set +e; set +u; source ./variables/local.env)
    CURRENT_GCLOUD_PROJECT=${GCLOUD_PROJECT:-}
    # Return success as the script part completed as requested (by skipping)
    return 0
fi

echo "Configuring Google Cloud services..."

# --- Proceed with detailed GCP setup ---

# Prompt for GCLOUD_PROJECT if not set or empty
if [ -z "$CURRENT_GCLOUD_PROJECT" ]; then
    GCLOUD_PROJECT_INPUT=""
    if [ -n "$TYPEDAI_TEST_GCLOUD_PROJECT" ]; then
        echo "Using TYPEDAI_TEST_GCLOUD_PROJECT: $TYPEDAI_TEST_GCLOUD_PROJECT"
        GCLOUD_PROJECT_INPUT="$TYPEDAI_TEST_GCLOUD_PROJECT"
    else
        read -r -p "Enter your Google Cloud Project ID: " GCLOUD_PROJECT_INPUT
    fi
    if [ -n "$GCLOUD_PROJECT_INPUT" ]; then
        _update_gcp_env_var "GCLOUD_PROJECT" "$GCLOUD_PROJECT_INPUT"
        CURRENT_GCLOUD_PROJECT="$GCLOUD_PROJECT_INPUT"
    else
        echo "Google Cloud Project ID is required to proceed with GCP services setup. Exiting this part."
        _update_gcp_env_var "TRACE_AGENT_ENABLED" "false"
        GCP_SETUP_SUCCESS=false
        return 1
    fi
else
    echo "Using existing GCLOUD_PROJECT: $CURRENT_GCLOUD_PROJECT"
fi

# Prompt for GCLOUD_REGION if not set or empty
CURRENT_GCLOUD_REGION=${GCLOUD_REGION:-}
if [ -z "$CURRENT_GCLOUD_REGION" ]; then
    GCLOUD_REGION_INPUT=""
    if [ -n "$TYPEDAI_TEST_GCLOUD_REGION" ]; then
        echo "Using TYPEDAI_TEST_GCLOUD_REGION: $TYPEDAI_TEST_GCLOUD_REGION"
        GCLOUD_REGION_INPUT="$TYPEDAI_TEST_GCLOUD_REGION"
    else
        read -r -p "Enter your Google Cloud Region (e.g., us-central1, default: us-central1): " GCLOUD_REGION_INPUT
    fi
    GCLOUD_REGION_INPUT=${GCLOUD_REGION_INPUT:-us-central1} # Default if empty
    _update_gcp_env_var "GCLOUD_REGION" "$GCLOUD_REGION_INPUT"
else
    echo "Using existing GCLOUD_REGION: $CURRENT_GCLOUD_REGION"
fi

# Prompt for GCLOUD_CLAUDE_REGION if not set or empty (optional, but good to group here)
CURRENT_GCLOUD_CLAUDE_REGION=${GCLOUD_CLAUDE_REGION:-}
DEFAULT_CLAUDE_REGION="us-east5" # Common default for Claude Opus
if [ -z "$CURRENT_GCLOUD_CLAUDE_REGION" ]; then
    GCLOUD_CLAUDE_REGION_INPUT=""
    if [ -n "$TYPEDAI_TEST_GCLOUD_CLAUDE_REGION" ]; then
        echo "Using TYPEDAI_TEST_GCLOUD_CLAUDE_REGION: $TYPEDAI_TEST_GCLOUD_CLAUDE_REGION"
        GCLOUD_CLAUDE_REGION_INPUT="$TYPEDAI_TEST_GCLOUD_CLAUDE_REGION"
    else
        read -r -p "Enter specific region for Anthropic Claude on Vertex (if different from $CURRENT_GCLOUD_REGION, e.g., us-east5, default: $DEFAULT_CLAUDE_REGION): " GCLOUD_CLAUDE_REGION_INPUT
    fi
    GCLOUD_CLAUDE_REGION_INPUT=${GCLOUD_CLAUDE_REGION_INPUT:-$DEFAULT_CLAUDE_REGION}
    _update_gcp_env_var "GCLOUD_CLAUDE_REGION" "$GCLOUD_CLAUDE_REGION_INPUT"
else
    echo "Using existing GCLOUD_CLAUDE_REGION: $CURRENT_GCLOUD_CLAUDE_REGION"
fi


if ! command -v gcloud &> /dev/null; then
    echo "Error: gcloud CLI could not be found. Please install gcloud SDK and authenticate."
    echo "See: https://cloud.google.com/sdk/docs/install"
    _update_gcp_env_var "TRACE_AGENT_ENABLED" "false"
    GCP_SETUP_SUCCESS=false
    return 1
fi

echo "Checking if project $CURRENT_GCLOUD_PROJECT exists and you have access..."
if ! gcloud projects describe "$CURRENT_GCLOUD_PROJECT" --quiet > /dev/null 2>&1; then
  echo "Error: Project $CURRENT_GCLOUD_PROJECT does not exist or you may not have permissions."
  echo "Please create the project in Google Cloud Console or ensure you have 'resourcemanager.projects.get' permission."
  _update_gcp_env_var "TRACE_AGENT_ENABLED" "false"
  GCP_SETUP_SUCCESS=false
  return 1
else
  echo "Project $CURRENT_GCLOUD_PROJECT found."
fi

# Set the active project for subsequent gcloud commands in this script session
gcloud config set project "$CURRENT_GCLOUD_PROJECT" --quiet

echo "Enabling common Google Cloud APIs (e.g., aiplatform.googleapis.com for Vertex AI/Gemini)..."
COMMON_APIS="aiplatform.googleapis.com"
APIS_TO_ENABLE=""

for API in $COMMON_APIS; do
    if ! gcloud services list --project="$CURRENT_GCLOUD_PROJECT" --enabled --filter="config.name=$API" --format="value(config.name)" --quiet | grep -q "$API"; then
        APIS_TO_ENABLE="$APIS_TO_ENABLE $API"
    else
        echo "API [$API] is already enabled."
    fi
done

if [ -n "$APIS_TO_ENABLE" ]; then
    echo "Enabling APIs: $APIS_TO_ENABLE"
    if ! gcloud services enable $APIS_TO_ENABLE --project="$CURRENT_GCLOUD_PROJECT" --quiet; then
        echo "Warning: Failed to enable one or more common APIs. Please check permissions ('serviceusage.services.enable') and try again."
        echo "Continuing setup..."
    else
        echo "Common APIs enabled successfully. It might take a few minutes for changes to propagate."
        sleep 15 # Give GCP a moment
    fi
else
    echo "All checked common APIs are already enabled."
fi

echo "Generic Google Cloud Platform services setup script completed."
echo "Important: Ensure you have run 'gcloud auth application-default login' for the application to authenticate with GCP services."

# Finalize and set success status
_update_gcp_env_var "TRACE_AGENT_ENABLED" "true"
GCP_SETUP_SUCCESS=true
echo "GCP services configured. TRACE_AGENT_ENABLED set to true."
return 0
