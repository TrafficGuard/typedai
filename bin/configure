#!/bin/bash

# Python setup ---------------------------------

# Check if pyenv is installed
if ! command -v pyenv &> /dev/null
then
    echo "pyenv could not be found. Please install pyenv."
    echo "See: https://github.com/pyenv/pyenv?tab=readme-ov-file#installation"
    exit 1
fi

pyenv install $(cat .python-version)
python -m pip install --upgrade pip
pip install aider-chat google-cloud-aiplatform "anthropic[vertex]" youtube-transcript-api


# Node.js setup using fnm ---------------------------------

# Check if fnm is installed
if ! command -v fnm &> /dev/null
then
    echo "fnm (Fast Node Manager) could not be found."
    echo "fnm is used to manage Node.js versions for this project."
    echo ""
    echo "To install fnm:"
    echo "1. Ensure 'curl' and 'unzip' are installed on your system (for the script installer)."
    echo "2. Run the installer script (macOS/Linux):"
    echo "   curl -fsSL https://fnm.vercel.app/install | bash"
    echo ""
    echo "   Alternatively, for macOS/Linux, you can use Homebrew:"
    echo "   brew install fnm"
    echo ""
    echo "   For Windows and other installation methods, see: https://github.com/Schniz/fnm#installation"
    echo ""
    echo "3. IMPORTANT: After installing fnm, set it up for your shell."
    echo "   Add ONE of the following lines to your shell's configuration file"
    echo "   (e.g., ~/.bashrc for bash, ~/.zshrc for zsh):"
    echo ""
    echo "   For bash: eval \"\$(fnm env --use-on-cd --shell bash)\""
    echo "   For zsh:  eval \"\$(fnm env --use-on-cd --shell zsh)\""
    echo "   For fish: fnm env --use-on-cd --shell fish | source  (in ~/.config/fish/conf.d/fnm.fish)"
    echo ""
    echo "4. After updating your shell configuration, close this terminal,"
    echo "   open a new one, and re-run this './bin/configure' script."
    exit 1
fi

# Heuristic check if fnm env seems to be active.
# Proper fnm setup involves 'eval "$(fnm env ...)"' in the shell config, which sets FNM_DIR and modifies PATH.
if [ -z "$FNM_DIR" ]; then
    echo ""
    echo "Warning: fnm is installed, but the FNM_DIR environment variable is not set."
    echo "This suggests that 'fnm env' might not be correctly configured or active in your current shell."
    echo "This can happen if you've installed fnm or updated your shell configuration"
    echo "but haven't started a new shell session or re-sourced your configuration yet."
    echo ""
    echo "Please ensure your shell configuration file (e.g., ~/.bashrc, ~/.zshrc) includes the line:"
    echo "  For bash: eval \"\$(fnm env --use-on-cd --shell bash)\""
    echo "  For zsh:  eval \"\$(fnm env --use-on-cd --shell zsh)\""
    echo "  (or the equivalent for your shell as shown during the fnm installation guidance)."
    echo ""
    echo "If you've just updated it, try running 'source ~/.your_shell_rc_file' (e.g., source ~/.bashrc)"
    echo "or opening a new terminal tab and then re-running this './bin/configure' script."
    echo "Attempting to proceed, but Node.js version management might not work as expected..."
    echo ""
fi

echo "Initialising server project using fnm (Node.js version from .nvmrc)"
# fnm automatically reads .nvmrc (or .node-version) in the current directory.
# 'fnm install' will install the specified Node.js version if not already present, and set it as current.
fnm install
if [ $? -ne 0 ]; then
    echo "Error: 'fnm install' failed. Please check your fnm setup, .nvmrc file, and ensure Node.js can be downloaded/installed."
    exit 1
fi

# 'fnm use' is generally not needed after 'fnm install' as install should activate the version.
# If issues occur where the version isn't active for the current script, 'fnm use' could be reinstated.

npm install
if [ $? -ne 0 ]; then
    echo "Error: 'npm install' failed. This might be due to an incorrect Node.js version, network issues, or other problems."
    echo "Please ensure fnm is correctly managing your Node.js version (check 'node -v' and 'npm -v')."
    exit 1
fi

# The rest of the script (Angular setup, etc.) will use the Node.js version set by fnm.

# Default environment variables  ----------------

if [[ ! -f ./variables/local.env ]]; then
    echo "Creating local.env by copying from local.env.example"
    cp ./variables/local.env.example ./variables/local.env
    cp ./variables/local.env.example ./variables/test.env
fi

# Populate SINGLE_USER_EMAIL from gcloud if possible
SINGLE_USER_EMAIL=$(gcloud config get-value account 2>/dev/null)
# Basic check if SINGLE_USER_EMAIL is an email address
if [[ "$SINGLE_USER_EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
  # In ./variables/local.env replace SINGLE_USER_EMAIL= with SINGLE_USER_EMAIL=${$SINGLE_USER_EMAIL}
  sed -i '' "s/^SINGLE_USER_EMAIL=.*/SINGLE_USER_EMAIL=${SINGLE_USER_EMAIL}/g" ./variables/local.env
  echo "Set SINGLE_USER_EMAIL to ${SINGLE_USER_EMAIL} in ./variables/local.env"
fi

# Angular setup ----------------

echo Initialising Angular project
cd frontend
npm install
cd ..

# CLI setup -------------

# Setup for bash
if [ -f ~/.bashrc ]; then
    if ! grep -q "TYPEDAI_HOME" ~/.bashrc; then
        echo "\n# TypedAI CLI environment" >> ~/.bashrc
        echo "export TYPEDAI_HOME=$(pwd)" >> ~/.bashrc
        echo "export PATH=\$TYPEDAI_HOME/bin/path:\$PATH" >> ~/.bashrc
    fi
fi

# Setup for zsh
if [ -f ~/.zshrc ]; then
    if ! grep -q "TYPEDAI_HOME" ~/.zshrc; then
        echo "\n# TypedAI CLI environment" >> ~/.zshrc
        echo "export TYPEDAI_HOME=$(pwd)" >> ~/.zshrc
        echo "export PATH=\$TYPEDAI_HOME/bin/path:\$PATH" >> ~/.zshrc
    fi
fi

echo "done"
