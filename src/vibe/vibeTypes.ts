import type { FieldValue } from '@google-cloud/firestore';
import type { SelectedFile as OriginalSelectedFile } from '#swe/discovery/selectFilesAgent'; // Keep original import alias if needed

// Represents a node in a file system tree (example structure)
export interface FileSystemNode {
	path: string;
	name: string;
	type: 'file' | 'directory';
	children?: FileSystemNode[];
	summary?: string; // Optional summary from indexing agent
}

// --- Modified SelectedFile interface ---
// NOTE: This modifies the import/usage from '#swe/discovery/selectFilesAgent'
// NOTE: This should align with the definition in '#swe/discovery/selectFilesAgent'
export interface SelectedFile {
	filePath: string; // Standardized to filePath
	reason?: string;
	readOnly?: boolean;
	category?: 'edit' | 'reference' | 'style_example' | 'unknown';
}

// --- VibeSession interface and related types ---

// Define the possible statuses as a type for better reusability and clarity
export type VibeStatus =
	| 'initializing' // Session created, preparing workspace
	| 'file_selection_review' // Waiting for user approval on the selected files - NEW
	| 'updating_selection' // AI is updating the file selection based on feedback - NEW
	| 'generating_design' // AI is generating the implementation plan - NEW
	| 'design_review' // Waiting for user approval on the AI-generated design/plan
	| 'design_review_details' // User is viewing design details (e.g., diff) - NEW (Was design_review_feedback?)
	| 'updating_design' // AI is updating the design based on feedback - NEW
	| 'coding' // AI is actively writing or modifying code
	| 'code_review' // Waiting for user feedback on the generated code changes
	| 'committing' // AI is preparing and making the commit
	| 'monitoring_ci' // Changes committed, waiting for CI/CD pipeline results
	| 'ci_failed' // CI/CD pipeline failed
	| 'completed' // Process finished successfully (including potential CI success)
	| 'error_file_selection' // Error during file selection - NEW
	| 'error_design_generation' // Error during design generation - NEW
	| 'error_coding' // Error during coding/commit - NEW
	| 'error'; // An unrecoverable error occurred during the process

// Define the structure for the AI's design answer
export interface DesignAnswer {
	summary: string;
	steps: string[];
	reasoning: string;
	// variations?: number; // Removed: This is now stored in VibeSession.selectedVariations after acceptance
}

export interface VibeSession {
	id: string; // Primary key, ideally a UUID
	userId: string; // To associate with a user
	title: string;
	instructions: string;
	repositorySource: 'local' | 'github' | 'gitlab'; // Source of the repository
	repositoryId: string; // Identifier for the repository (e.g., local path, 'owner/repo', 'group/project')
	repositoryName?: string; // Optional: User-friendly name (e.g., 'my-cool-project')
	targetBranch: string; // The existing branch to base the work on and potentially merge into
	workingBranch: string; // The name of the branch to perform work on (can be new or existing)
	createWorkingBranch: boolean; // Whether the workingBranch needs to be created
	useSharedRepos: boolean; // Flag indicating if shared repository storage should be used
	status: VibeStatus; // Use the exported type
	lastAgentActivity: number; // Time of the last significant action by an agent
	fileSelection?: SelectedFile[]; // Array of files selected by the file selection agent for the task - Uses MODIFIED SelectedFile
	designAnswer?: DesignAnswer; // Use the exported type
	selectedVariations?: number; // Optional: Number of variations selected by the user if multiple were generated
	codeDiff?: string; // The generated code changes in diff format
	commitSha?: string; // The SHA hash of the commit generated by the Vibe session
	pullRequestUrl?: string; // The URL of the pull/merge request created (if applicable)
	ciCdStatus?: 'pending' | 'running' | 'success' | 'failed' | 'cancelled'; // Status of the associated CI/CD pipeline run
	ciCdJobUrl?: string; // Direct link to the specific CI/CD job or pipeline run
	ciCdAnalysis?: string; // AI-generated analysis of CI/CD failure logs (if applicable)
	ciCdProposedFix?: string; // AI-proposed code changes to fix a CI/CD failure (if applicable)
	createdAt: number; // Time when the session was created
	updatedAt: number; // Time when the session was last updated
	/** History of agents ids run for this session */
	agentHistory?: string[];
	error?: string; // Optional field to store error messages if the status is 'error'
}

// --- Data Transfer Objects (DTOs) ---

// Data needed to create a new session (typically from user input)
export type CreateVibeSessionData = Omit<
	VibeSession,
	| 'id' // Generated by the system
	| 'userId' // Added by the backend based on authentication
	| 'status' // Initialized by the system
	| 'lastAgentActivity' // Initialized by the system
	| 'fileSelection' // Populated by agent - Uses MODIFIED SelectedFile
	| 'designAnswer' // Populated by agent
	| 'codeDiff' // Populated by agent
	| 'commitSha' // Populated by agent
	| 'pullRequestUrl' // Populated by agent
	| 'ciCdStatus' // Populated by monitoring
	| 'ciCdJobUrl' // Populated by monitoring
	| 'ciCdAnalysis' // Populated by agent
	| 'ciCdProposedFix' // Populated by agent
	| 'createdAt' // Set by the system
	| 'updatedAt' // Set by the system
	| 'currentAgentId' // Set by the system during orchestration
	| 'agentHistory' // Set by the system during orchestration
	| 'error' // Set by the system on error
>;

// Data allowed for generic updates via the updateVibeSession method
// Excludes fields that should not be directly updated or are immutable
export type UpdateVibeSessionData = Partial<
	Omit<
		VibeSession,
		| 'id' // Cannot change ID
		| 'userId' // Cannot change owner
		| 'repositorySource' // Immutable after creation
		| 'repositoryId' // Immutable after creation
		| 'targetBranch' // Base branch is immutable after creation
		| 'workingBranch' // Working branch is immutable after creation/start
		| 'createWorkingBranch' // Flag is immutable after creation/start
		| 'createdAt' // Immutable
		// Note: fileSelection uses MODIFIED SelectedFile
	> & {
		filesToAdd?: string[]; // Array of file paths to add
		filesToRemove?: string[]; // Array of file paths to remove
	}
>;

// Specific data structure for requesting an update to the design based on new instructions
export interface UpdateDesignInstructionsData {
	instructions: string; // User's feedback or new instructions for refining the design
}

// Specific data structure for requesting code revisions based on user review comments
export interface UpdateCodeReviewData {
	reviewComments: string; // User's comments or instructions for revising the code
}

// Specific data structure for the final commit action, providing commit details
export interface CommitChangesData {
	commitTitle: string; // The title for the git commit
	commitMessage: string; // The detailed message for the git commit
}

// Vibe Preset Definitions
export interface VibePreset {
	id: string;
	userId: string;
	name: string;
	config: Omit<CreateVibeSessionData, 'title' | 'instructions'>;
	createdAt: number;
	updatedAt: number;
}

// --- File System Node ---
// Moved from top to avoid potential conflicts if imported elsewhere
export interface FileSystemNode {
	path: string;
	name: string;
	type: 'file' | 'directory';
	children?: FileSystemNode[];
	summary?: string; // Optional summary from indexing agent
}

// --- Added missing workflow data type definitions ---
// These were previously defined in the deleted vibe/vibeTypes file

/** Data for updating file selection based on a user prompt */
export interface UpdateSelectionPromptData {
	prompt: string;
}

/** Data for generating a detailed design, potentially with variations */
export interface GenerateDesignData {
	variations?: number; // Optional number of variations (e.g., 1-5)
}

/** Data for updating the design based on a user prompt */
export interface UpdateDesignPromptData {
	prompt: string;
}

/** Configuration part of a Vibe Preset (derived from CreateVibeSessionData) */
export type VibePresetConfig = Omit<CreateVibeSessionData, 'title' | 'instructions'>;

// --- End Definitions ---
